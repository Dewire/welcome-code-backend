service:
  name:                welcome-backend-onboarding

plugins:
  - serverless-webpack
  - serverless-offline

custom:
  serverless-offline:
    port:                         4000
  webpack: ../webpack.config.js
  AWS_ACCOUNT_ID:                 318366659664
  AREA_TABLE_NAME:                ${self:provider.stage}-Area
  MUNICIPALITY_TABLE_NAME:        ${self:provider.stage}-Municipality
  ABOUT_MUNICIPALITY_TABLE_NAME:  ${self:provider.stage}-About-Municipality
  AREA_OVERVIEW_TABLE_NAME:       ${self:provider.stage}-Area-Overview
  ABOUT_SERVICE_TABLE_NAME:       ${self:provider.stage}-About-Service
  USER_GROUP_TABLE_NAME:          ${self:provider.stage}-User-Group
  fileStoreBucket:                ${cf:welcome-resources-${self:provider.stage}.FileStoreBucket}
  UserPool:                       ${cf:welcome-resources-${self:provider.stage}.UserPool}
  UserPoolArn:                    arn:aws:cognito-idp:eu-west-1:318366659664:userpool/${self:custom.UserPool}

provider:
  name:                aws
  runtime:             nodejs10.x
  stage:               ${env:STAGE, opt:stage, 'cont'}
  region:              eu-west-1
  domain:              ${env:DOMAIN, opt:domain, 'welcome.dewire.com'}
  deploymentBucket:
    name: ${cf:welcome-resources-${self:provider.stage}.DeploymentBucket, 'lambdas.${self:provider.stage}.${self:provider.domain}'}
  stackTags:
    STACK:  "${self:service}"
    REGION: "${self:provider.region}"
    COMMIT: "${opt:commit}"

functions:
  OnBoard:
    handler:                     OnBoardingHandler.handler
    events:
      - http:
          method:                 POST
          path:                   /{municipality}
          cors:                   true
          authorizer:
            name:                 authorizer
            arn:                  ${self:custom.UserPoolArn}
      - http:
          method:                 DELETE
          path:                   /{municipality}
          cors:                   true
          authorizer:
            name:                 authorizer
            arn:                  ${self:custom.UserPoolArn}
    environment:
      AREA_TABLE_NAME:                ${self:custom.AREA_TABLE_NAME}
      MUNICIPALITY_TABLE_NAME:        ${self:custom.MUNICIPALITY_TABLE_NAME}
      ABOUT_MUNICIPALITY_TABLE_NAME:  ${self:custom.ABOUT_MUNICIPALITY_TABLE_NAME}
      AREA_OVERVIEW_TABLE_NAME:       ${self:custom.AREA_OVERVIEW_TABLE_NAME}
      ABOUT_SERVICE_TABLE_NAME:       ${self:custom.ABOUT_SERVICE_TABLE_NAME}
      USER_GROUP_TABLE_NAME:          ${self:custom.USER_GROUP_TABLE_NAME}
      USER_POOL_ID:               ${self:custom.UserPool}
      BUCKET:                     ${self:custom.fileStoreBucket}
    role:  arn:aws:iam::${self:custom.AWS_ACCOUNT_ID}:role/${self:provider.stage}-OnboardingRole

  EnableMunicipality:
    handler:                     OnBoardingHandler.enable
    events:
      - http:
          method:                 POST
          path:                   /{municipality}/enable
          cors:                   true
          authorizer:
            name:                 authorizer
            arn:                  ${self:custom.UserPoolArn}
      - http:
          method:                 DELETE
          path:                   /{municipality}/enable
          cors:                   true
          authorizer:
            name:                 authorizer
            arn:                  ${self:custom.UserPoolArn}
    environment:
      AREA_TABLE_NAME:                ${self:custom.AREA_TABLE_NAME}
      MUNICIPALITY_TABLE_NAME:        ${self:custom.MUNICIPALITY_TABLE_NAME}
      ABOUT_MUNICIPALITY_TABLE_NAME:  ${self:custom.ABOUT_MUNICIPALITY_TABLE_NAME}
      AREA_OVERVIEW_TABLE_NAME:       ${self:custom.AREA_OVERVIEW_TABLE_NAME}
      ABOUT_SERVICE_TABLE_NAME:       ${self:custom.ABOUT_SERVICE_TABLE_NAME}
      USER_GROUP_TABLE_NAME:          ${self:custom.USER_GROUP_TABLE_NAME}
      USER_POOL_ID:               ${self:custom.UserPool}
      BUCKET:                     ${self:custom.fileStoreBucket}
    role:  arn:aws:iam::${self:custom.AWS_ACCOUNT_ID}:role/${self:provider.stage}-OnboardingRole

  UserPoolAllHandler:
    handler:                     UserPoolHandler.handler
    events:
      - http:
          method:                 GET
          path:                   /{municipality}/users
          cors:                   true
          authorizer:
            name:                 authorizer
            arn:                  ${self:custom.UserPoolArn}
      - http:
          method:                 POST
          path:                   /user
          cors:                   true
          authorizer:
            name:                 authorizer
            arn:                  ${self:custom.UserPoolArn}
    environment:
      AREA_TABLE_NAME:                ${self:custom.AREA_TABLE_NAME}
      MUNICIPALITY_TABLE_NAME:        ${self:custom.MUNICIPALITY_TABLE_NAME}
      ABOUT_MUNICIPALITY_TABLE_NAME:  ${self:custom.ABOUT_MUNICIPALITY_TABLE_NAME}
      AREA_OVERVIEW_TABLE_NAME:       ${self:custom.AREA_OVERVIEW_TABLE_NAME}
      ABOUT_SERVICE_TABLE_NAME:       ${self:custom.ABOUT_SERVICE_TABLE_NAME}
      USER_GROUP_TABLE_NAME:          ${self:custom.USER_GROUP_TABLE_NAME}
      USER_POOL_ID:               ${self:custom.UserPool}
      BUCKET:                     ${self:custom.fileStoreBucket}
    role:  arn:aws:iam::${self:custom.AWS_ACCOUNT_ID}:role/${self:provider.stage}-OnboardingRole

resources:
  - Resources:
      CustomDomainMapping:
          Type: AWS::ApiGateway::BasePathMapping
          Properties:
              BasePath: 'onboard'
              DomainName: ${cf:welcome-backend-${self:provider.stage}.CustomDomainName}
              RestApiId:
                  Ref: ApiGatewayRestApi
              Stage: "${self:provider.stage}"
          DependsOn: ApiGatewayRestApi
