service:
  name:                welcome-backend-image-store

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

custom:
  serverless-offline:
    port:                         4000
  webpack: ../webpack.config.js
  AREA_TABLE_NAME:                ${self:provider.stage}-Area
  MUNICIPALITY_TABLE_NAME:        ${self:provider.stage}-Municipality
  ABOUT_MUNICIPALITY_TABLE_NAME:  ${self:provider.stage}-About-Municipality
  AREA_OVERVIEW_TABLE_NAME:       ${self:provider.stage}-Area-Overview
  ABOUT_SERVICE_TABLE_NAME:       ${self:provider.stage}-About-Service
  USER_GROUP_TABLE_NAME:          ${self:provider.stage}-User-Group
  fileStoreBucket:                ${self:provider.stage}-welcome-file-storage
  UserPool:                       ${cf:welcome-resources-${self:provider.stage}.UserPool}
  UserPoolArn:                    arn:aws:cognito-idp:eu-west-1:318366659664:userpool/${self:custom.UserPool}
  CORS_CONFIG:
    origin: '*'
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - cache-control
      - expires
      - pragma
    allowCredentials: true

provider:
  name:                aws
  runtime:             nodejs10.x
  stage:               ${env:STAGE, opt:stage, 'cont'}
  region:              eu-west-1
  domain:              ${env:DOMAIN, opt:domain, 'welcome.dewire.com'}
  versionLambda:       false
  environment:
    AREA_TABLE_NAME:                ${self:custom.AREA_TABLE_NAME}
    MUNICIPALITY_TABLE_NAME:        ${self:custom.MUNICIPALITY_TABLE_NAME}
    ABOUT_MUNICIPALITY_TABLE_NAME:  ${self:custom.ABOUT_MUNICIPALITY_TABLE_NAME}
    AREA_OVERVIEW_TABLE_NAME:       ${self:custom.AREA_OVERVIEW_TABLE_NAME}
    ABOUT_SERVICE_TABLE_NAME:       ${self:custom.ABOUT_SERVICE_TABLE_NAME}
    USER_GROUP_TABLE_NAME:          ${self:custom.USER_GROUP_TABLE_NAME}
  deploymentBucket:
    name: lambdas.${self:provider.stage}.${self:provider.domain}
  stackTags:
    STACK:  "${self:service}"
    REGION: "${self:provider.region}"
    COMMIT: "${opt:commit}"

functions:
  ImageStore:
    handler:                      ImageHandler.file
    events:
      - http:
          method:                 ANY
          path:                   /{municipality}
          cors:                   ${self:custom.CORS_CONFIG}
          authorizer:
            name:                 authorizer
            arn:                  ${self:custom.UserPoolArn}
      - http:
          method:                 ANY
          path:                   /{municipality}/{proxy+}
          cors:                   ${self:custom.CORS_CONFIG}
          authorizer:
            name:                 authorizer
            arn:                  ${self:custom.UserPoolArn}
    environment:
      POPULATE_MOCK_DATA: false
      MUNICIPALITY_TABLE_NAME:        ${self:custom.MUNICIPALITY_TABLE_NAME}
      USER_GROUP_TABLE_NAME:          ${self:custom.USER_GROUP_TABLE_NAME}
      BUCKET:                 ${self:custom.fileStoreBucket}
resources:
  -
    Resources:
      CustomDomainMapping:
          Type: AWS::ApiGateway::BasePathMapping
          Properties:
              BasePath: 'image'
              DomainName: ${cf:welcome-backend-${self:provider.stage}.CustomDomainName}
              RestApiId:
                  Ref: ApiGatewayRestApi
              Stage: "${self:provider.stage}"
          DependsOn: ApiGatewayRestApi

      DynamoDBIamPolicy:
        Type: AWS::IAM::Policy
        Properties:
          PolicyName: lambda-dynamodb
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # TODO refactor dynamoDB.js so that these are not required
              - Effect: Allow
                Action:
                    - dynamodb:DescribeTable
                Resource:
                  - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.AREA_TABLE_NAME}*
                  - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.ABOUT_MUNICIPALITY_TABLE_NAME}*
                  - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.ABOUT_SERVICE_TABLE_NAME}*
                  - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.AREA_OVERVIEW_TABLE_NAME}*
              # FileStore permissions
              - Effect: Allow
                Action: "*"
                Resource:
                  - arn:aws:s3:::${self:custom.fileStoreBucket}/*
              # TODO check if these are only necessary for error route
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:${self:provider.region}:*:log-group:*:log-stream:*
              # Authorizer permissions
              - Effect: Allow
                Action:
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource:
                  - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.USER_GROUP_TABLE_NAME}*
                  - arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.MUNICIPALITY_TABLE_NAME}*
          Roles:
            - Ref: IamRoleLambdaExecution
